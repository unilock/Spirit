plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfigs = [
            "spirit.common.mixins.json"
        ]
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url = "https://maven.k-4u.nl" }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    modApi "com.teamresourceful.resourcefullib:resourcefullib-forge-1.19.2:${rootProject.resourcefullib_version}"

    modCompileOnly("mcjty.theoneprobe:theoneprobe:${rootProject.top_version}:api") { transitive = false }
    modRuntimeOnly("mcjty.theoneprobe:theoneprobe:${rootProject.top_version}") { transitive = false }

    //modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-forge:${rootProject.rei_version}"
    //modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        include('**/data/spirit/recipes/**')
        expand "common": "forge"
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifactId = rootProject.mod_id + "-" + project.name + "-" + project.minecraft_version
            pom {
                name = 'Spirit'
                description = 'A magic mod revolving around souls originally inspired by Soul Shards'
                url = 'https://github.com/terrarium-earth/Spirit'

                scm {
                    connection = 'git:https://github.com/terrarium-earth/Spirit.git'
                    developerConnection = 'git:https://github.com/terrarium-earth/Spirit.git'
                    url = 'https://github.com/terrarium-earth/Spirit'
                }

                licenses {
                    license {
                        name = 'ARR'
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = "https://maven.resourcefulbees.com/repository/codexadrian/"
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}